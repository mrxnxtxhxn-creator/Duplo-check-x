<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scanner de Inventário Pro</title>
    <script src="https://unpkg.com/html5-qrcode/minified/html5-qrcode.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        /* Pequenos ajustes para replicar o visual shadcn/ui */
        body { background-color: #f8fafc; }
        .card { background-color: white; border-radius: 0.75rem; border: 1px solid #e2e8f0; padding: 1.5rem; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); }
        .btn { display: inline-flex; align-items: center; justify-content: center; border-radius: 0.5rem; font-weight: 500; padding: 0.5rem 1rem; transition: background-color 0.2s; }
        .btn-primary { background-color: #1a202c; color: white; }
        .btn-primary:hover { background-color: #334155; }
        .btn-secondary { background-color: #f1f5f9; color: #1a202c; border: 1px solid #e2e8f0; }
        .btn-secondary:hover { background-color: #e2e8f0; }
        button:disabled { background-color: #e2e8f0; color: #94a3b8; cursor: not-allowed; }
        .feedback { padding: 1rem; border-radius: 0.5rem; text-align: center; font-weight: 500; }
        .feedback-success { background-color: #dcfce7; color: #166534; }
        .feedback-error { background-color: #fee2e2; color: #991b1b; }
        .feedback-warning { background-color: #fef3c7; color: #92400e; }
        .feedback-info { background-color: #e0e7ff; color: #3730a3; }
    </style>
</head>
<body class="p-4">
    <div class="max-w-2xl mx-auto space-y-6">
        <div class="card text-center">
            <h1 class="text-2xl font-bold flex items-center justify-center gap-2">
                <i class="fa-solid fa-barcode"></i> Scanner de Inventário Pro
            </h1>
        </div>

        <div class="card space-y-4">
            <label for="id-input" class="text-sm font-medium">Cole os IDs a encontrar (um por linha):</label>
            <textarea id="id-input" placeholder="ID-PACOTE-001&#10;ID-PACOTE-002" class="w-full min-h-[100px] border rounded-md p-2"></textarea>
            <div class="flex gap-2">
                <button id="save-btn" class="btn btn-primary w-full"><i class="fa-solid fa-save mr-2"></i> Salvar Lista</button>
                <button id="clear-btn" class="btn btn-secondary w-full"><i class="fa-solid fa-trash-2 mr-2"></i> Limpar Tudo</button>
            </div>
        </div>

        <div class="card space-y-4">
            <div>
                <label for="camera-select" class="text-sm font-medium mb-2 block">Câmera:</label>
                <select id="camera-select" class="w-full border rounded-md p-2"></select>
            </div>
            <div class="flex gap-2">
                <button id="start-scan-btn" class="btn btn-primary w-full"><i class="fa-solid fa-camera mr-2"></i> Iniciar Scanner</button>
                <button id="stop-scan-btn" class="btn btn-secondary w-full"><i class="fa-solid fa-square mr-2"></i> Parar Scanner</button>
            </div>
            <div id="scanner-reader" class="w-full aspect-square border rounded-lg overflow-hidden bg-gray-100"></div>
            <div id="feedback-box" class="feedback feedback-info">Aguardando operação...</div>
        </div>

        <div class="card space-y-4">
            <div>
                <label id="progress-label" class="text-sm font-medium">Progresso: 0 de 0</label>
                <div class="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                    <div id="progress-bar" class="bg-green-600 h-2.5 rounded-full" style="width: 0%; transition: width 0.3s;"></div>
                </div>
            </div>
            <div id="found-list" class="max-h-48 overflow-y-auto space-y-2"></div>
            <button id="export-btn" class="btn btn-primary w-full bg-green-700 hover:bg-green-800">
                <i class="fa-solid fa-file-csv mr-2"></i> Exportar Encontrados (CSV)
            </button>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const App = {
        state: {
            idsToFind: new Set(),
            foundIds: new Map(),
            cameras: [],
            scanner: null,
            isScanning: false,
        },
        DOM: { /* Preenchido no init */ },
        audioContext: new (window.AudioContext || window.webkitAudioContext)(),

        init() {
            this.DOM = {
                idInput: document.getElementById('id-input'),
                saveBtn: document.getElementById('save-btn'),
                clearBtn: document.getElementById('clear-btn'),
                cameraSelect: document.getElementById('camera-select'),
                startScanBtn: document.getElementById('start-scan-btn'),
                stopScanBtn: document.getElementById('stop-scan-btn'),
                reader: document.getElementById('scanner-reader'),
                feedbackBox: document.getElementById('feedback-box'),
                progressLabel: document.getElementById('progress-label'),
                progressBar: document.getElementById('progress-bar'),
                foundList: document.getElementById('found-list'),
                exportBtn: document.getElementById('export-btn'),
            };
            this.loadState();
            this.bindEvents();
            this.populateCameraSelect();
            this.updateUI();
        },

        bindEvents() {
            this.DOM.saveBtn.addEventListener('click', () => this.saveIds());
            this.DOM.clearBtn.addEventListener('click', () => this.clearAll());
            this.DOM.startScanBtn.addEventListener('click', () => this.startScanner());
            this.DOM.stopScanBtn.addEventListener('click', () => this.stopScanner());
            this.DOM.exportBtn.addEventListener('click', () => this.exportToCSV());
        },

        playBeep(type) { /* ... (código do bip omitido para brevidade, mas funciona igual) ... */ },

        loadState() {
            const savedState = localStorage.getItem('inventoryScannerStateHTML');
            if (savedState) {
                const parsed = JSON.parse(savedState);
                this.state.idsToFind = new Set(parsed.idsToFind);
                this.state.foundIds = new Map(parsed.foundIds);
                this.DOM.idInput.value = parsed.idsToFind.join('\n');
            }
        },

        saveState() {
            const stateToSave = {
                idsToFind: Array.from(this.state.idsToFind),
                foundIds: Array.from(this.state.foundIds.entries())
            };
            localStorage.setItem('inventoryScannerStateHTML', JSON.stringify(stateToSave));
        },

        saveIds() {
            const ids = this.DOM.idInput.value.split('\n').map(id => id.trim()).filter(Boolean);
            this.state.idsToFind = new Set(ids);
            this.updateUI();
            this.saveState();
            alert('Lista salva com sucesso!');
        },

        clearAll() {
            if (confirm('Limpar todos os dados?')) {
                this.state.idsToFind.clear();
                this.state.foundIds.clear();
                this.DOM.idInput.value = '';
                this.updateUI();
                this.saveState();
            }
        },

        updateUI() {
            const total = this.state.idsToFind.size;
            const found = this.state.foundIds.size;
            const progress = total > 0 ? (found / total) * 100 : 0;

            this.DOM.progressLabel.textContent = `Progresso: ${found} de ${total}`;
            this.DOM.progressBar.style.width = `${progress}%`;

            this.DOM.foundList.innerHTML = '';
            Array.from(this.state.foundIds.entries()).reverse().forEach(([id, timestamp]) => {
                const time = new Date(timestamp).toLocaleTimeString('pt-BR');
                const itemDiv = document.createElement('div');
                itemDiv.className = 'flex justify-between items-center p-2 bg-gray-50 rounded';
                itemDiv.innerHTML = `
                    <span class="flex items-center gap-2 font-medium text-gray-800">
                        <i class="fa-solid fa-check text-green-600"></i> ${id}
                    </span>
                    <small class="text-gray-500">${time}</small>
                `;
                this.DOM.foundList.appendChild(itemDiv);
            });
            
            this.DOM.startScanBtn.disabled = this.state.isScanning;
            this.DOM.stopScanBtn.disabled = !this.state.isScanning;
            this.DOM.exportBtn.disabled = found === 0;
        },

        showFeedback(type, message) {
            this.DOM.feedbackBox.textContent = message;
            this.DOM.feedbackBox.className = `feedback feedback-${type}`;
        },

        async populateCameraSelect() { /* ... (código omitido, funciona igual) ... */ },
        startScanner() { /* ... (código omitido, funciona igual) ... */ },
        stopScanner() { /* ... (código omitido, funciona igual) ... */ },
        onScanSuccess(decodedText) { /* ... (código omitido, funciona igual) ... */ },
        exportToCSV() { /* ... (código omitido, funciona igual) ... */ }
    };

    // Para manter o código mais limpo, as funções completas que não mudaram foram omitidas aqui, mas estão no código final que você deve copiar.
    // O código completo para as funções omitidas está abaixo para referência.
    App.playBeep = function(type) {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
        if (type === 'success') { oscillator.frequency.value = 800; oscillator.type = 'sine'; }
        else if (type === 'error') { oscillator.frequency.value = 400; oscillator.type = 'triangle'; }
        else if (type === 'warning') { oscillator.frequency.value = 600; oscillator.type = 'sawtooth'; }
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + (type === 'error' ? 0.2 : 0.1));
    };
    App.populateCameraSelect = async function() {
        try {
            const devices = await Html5Qrcode.getCameras(); this.state.cameras = devices;
            if (devices && devices.length) {
                this.DOM.cameraSelect.innerHTML = '';
                devices.forEach(device => {
                    const option = document.createElement('option');
                    option.value = device.id; option.textContent = device.label || `Câmera ${this.DOM.cameraSelect.length + 1}`;
                    this.DOM.cameraSelect.appendChild(option);
                });
                const backCamera = devices.find(d => d.label.toLowerCase().includes('back') || d.label.toLowerCase().includes('traseira'));
                if (backCamera) this.DOM.cameraSelect.value = backCamera.id;
            }
        } catch (err) { console.error("Erro ao obter câmeras:", err); this.showFeedback('error', 'Não foi possível acessar as câmeras.'); }
    };
    App.startScanner = function() {
        if (this.state.isScanning) return;
        const selectedCameraId = this.DOM.cameraSelect.value;
        if (!selectedCameraId) { this.showFeedback('error', 'Nenhuma câmera selecionada.'); return; }
        this.state.scanner = new Html5Qrcode('scanner-reader');
        const config = { fps: 10, qrbox: { width: 250, height: 250 } };
        this.state.scanner.start(selectedCameraId, config, (decodedText) => this.onScanSuccess(decodedText), (errorMessage) => {})
        .then(() => { this.state.isScanning = true; this.updateUI(); this.showFeedback('success', 'Scanner iniciado.'); })
        .catch(err => { console.error("Error starting scanner:", err); this.showFeedback('error', 'Falha ao iniciar a câmera.'); });
    };
    App.stopScanner = function() {
        if (!this.state.isScanning || !this.state.scanner) return;
        this.state.scanner.stop().then(() => {
            this.state.isScanning = false; this.updateUI(); this.showFeedback('warning', 'Scanner parado.'); this.DOM.reader.innerHTML = '';
        }).catch(err => console.error("Error stopping scanner:", err));
    };
    App.onScanSuccess = function(decodedText) {
        if (!this.state.isScanning) return;
        if (this.state.foundIds.has(decodedText)) { this.showFeedback('warning', `Já escaneado: ${decodedText}`); this.playBeep('warning'); }
        else if (this.state.idsToFind.has(decodedText)) {
            this.state.foundIds.set(decodedText, new Date().toISOString()); this.showFeedback('success', `Encontrado: ${decodedText}`); this.playBeep('success'); this.updateUI(); this.saveState();
        } else { this.showFeedback('error', `Inválido: ${decodedText}`); this.playBeep('error'); }
    };
    App.exportToCSV = function() {
        let csvContent = "data:text/csv;charset=utf-8,ID_PACOTE,DATA_HORA_LEITURA\n";
        this.state.foundIds.forEach((timestamp, id) => {
            const formattedDate = new Date(timestamp).toLocaleString('pt-BR');
            csvContent += `${id},"${formattedDate}"\n`;
        });
        const link = document.createElement("a");
        link.setAttribute("href", encodeURI(csvContent));
        link.setAttribute("download", `inventario_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link); link.click(); document.body.removeChild(link);
    };

    App.init();
});
</script>
</body>
</html>
